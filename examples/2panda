#!/usr/bin/env ruby

require File.dirname(__FILE__) + '/../lib/xgame'

XGame('The Panda') { |screen, background, world, callbacks|

	class Panda < Rubygame::Sprites::BasicSprite
		include Rubygame::Sprites::MovingSprite
		include Rubygame::Sprites::BoundedSprite
	end

	class Platform < Rubygame::Sprites::BasicSprite
		include Rubygame::Sprites::EdgeSprite
		def set_move(s, e, v)
			@s = s
			@e = e
			@v = v
		end

		def hit(v, by)
			by.reference = @v if @v and by.respond_to?(:reference=)
		end

		def update(time)
			self.edges = {:top => true, :left => true, :right => true, :bottom => false}
			if @s
				x, y = @rect.center
				@v[0] *= -1 if x > @e[0] or x < @s[0]
				@v[1] *= -1 if y > @e[1] or y < @s[1]
				@rect.centerx = x + 50 * @v[0] * time/1000.0
				@rect.centery = y + 50 * @v[1] * time/1000.0
			end
		end
	end

	panda = Panda.new(10,screen.height,'panda.png')
	panda2 = Panda.new(200,screen.height,'panda.png')
	platform = Platform.new(100, screen.height-100, 'platform.png')
	platform2 = Platform.new(150, screen.height-150, 'platform.png')
	platform2.set_move([150,400],[400,400],[1,0])
	world.force = [0,1,{:down => 4}] # Gravity. Force of 1 down that may not take velocity above 4
	world.extend(Rubygame::Sprites::CollideGroup) # Make everything in the world collide
	world.push panda, panda2, platform, platform2

	callbacks[Rubygame::KeyDownEvent] = lambda { |event|
			case event.key
				when Rubygame::K_ESCAPE
					throw :quit #quit when the user hits escape
				when Rubygame::K_RIGHT
					panda.go([1,nil])
				when Rubygame::K_LEFT
					panda.go([-1,nil])
				when Rubygame::K_UP
					panda.go([nil,-2])
				when Rubygame::K_D
					panda2.go([1,nil])
				when Rubygame::K_A
					panda2.go([-1,nil])
				when Rubygame::K_W # This does not work right on my Dvorak keyboard. GNOME shift+shift is not respected. Needs configurable.
					panda2.go([nil,-2])
			end
	}

	callbacks[Rubygame::KeyUpEvent] = lambda { |event|
			case event.key
				when Rubygame::K_RIGHT
					panda.stop(:right)
				when Rubygame::K_LEFT
					panda.stop(:left)
				when Rubygame::K_UP
					panda.stop(:up)
				when Rubygame::K_D
					panda2.stop(:right)
				when Rubygame::K_A
					panda2.stop(:left)
				when Rubygame::K_W
					panda2.stop(:up)
			end
	}

}
